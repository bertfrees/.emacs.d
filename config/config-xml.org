* XML

#+BEGIN_SRC emacs-lisp
  
  (add-to-list 'auto-mode-alist '("\\.xml$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.xsd$" . nxml-mode))
  
  (eval-after-load 'nxml-mode '(progn
    
    (setq-default nxml-child-indent 4)
    (setq nxml-slash-auto-complete-flag t)
    
    (smart-tabs-advice nxml-indent-line nxml-child-indent)
    
    (push (expand-file-name "schema/schemas.xml" emacs-dir) rng-schema-locating-files)
    
    (require-package 'auto-complete)
    (require-package 'auto-complete-nxml)
    (require 'auto-complete)
    (require 'auto-complete-nxml)
    
    (remove-hook 'nxml-mode-hook 'auto-complete-nxml-setup)
    
    (add-hook 'nxml-mode-hook
      (lambda () (set (make-local-variable 'ido-use-filename-at-point) nil)
                 (local-set-key (kbd "RET") 'nxml-newline-and-indent-maybe-auto-newline)
                 (local-set-key ">" 'nxml-electric-gt)
                 (guess-style-guess-variable 'indent-tabs-mode)
                 (guess-style-guess-variable 'tab-width)
                 (guess-style-guess-variable 'nxml-child-indent)
                 (smart-tabs-mode t)
                 (setq fill-column 100)
                 (when (display-graphic-p)
                   (whitespace-mode t))
                 (highlight-fixme-and-todo)
                 (setq ac-sources '(ac-source-nxml-tag
                                    ac-source-nxml-attr
                                    ac-source-nxml-attr-value))
                 (auto-complete-mode t)
                 (auto-complete-nxml-init-project)))
    
    (defun nxml-newline-and-indent-maybe-auto-newline ()
      (interactive)
      (nxml-ensure-scan-up-to-date)
      (if (and (not (nxml-get-inside (point)))
               (eq (point) (nxml-scan-element-backward (point) t))
               (looking-at (concat "</" (xmltok-start-tag-qname) ">")))
          (progn
            (newline)
            (save-excursion (newline))
            (nxml-indent-line)
            (save-excursion (forward-char)
                            (nxml-indent-line)))
        (newline)
        (nxml-indent-line)))
  
    ;; automatically add closing tags
    (defun nxml-electric-gt ()
      (interactive)
      (nxml-ensure-scan-up-to-date)
      (insert ">")
      (if (and (eq (nxml-token-before) (point))
               (eq xmltok-type 'start-tag))
          (save-excursion
            (insert (concat "</" (xmltok-start-tag-qname) ">")))))
  
    ;; fixes nxml-electric-slash
    (defun nxml-electric-slash (arg)
      (interactive "*P")
      (nxml-ensure-scan-up-to-date)
      (let* ((slash-pos (point))
             (end-tag-p (and (eq (char-before slash-pos) ?<)
                             (not (nxml-get-inside slash-pos))))
             (at-indentation (save-excursion
                               (back-to-indentation)
                               (eq (point) (1- slash-pos)))))
        (self-insert-command (prefix-numeric-value arg))
        (unless arg
          (if nxml-slash-auto-complete-flag
              (if end-tag-p
                  (condition-case err
                      (let ((start-tag-end
                             (nxml-scan-element-backward (1- slash-pos) t)))
                        (when start-tag-end
                          (insert (xmltok-start-tag-qname) ">")))
                    (nxml-scan-error nil))
                (if (and (eq (nxml-token-before) (point))
                         (eq xmltok-type 'partial-empty-element))
                    (insert ">")
                  (when (and (eq (nxml-token-before) (1+ (point)))
                             (eq xmltok-type 'empty-element))
                    (forward-char)
                    (when (looking-at (concat "[\s\t\n]*</" (xmltok-start-tag-qname) ">"))
                      (while (looking-at "[\s\t\n]")
                        (delete-char 1))
                      (delete-char (+ 3 (length (xmltok-start-tag-qname)))))))))
          (when (and end-tag-p at-indentation)
            (nxml-indent-line)))))
    
    (defun nxml-pretty-print-region (begin end)
      (interactive "r")
      (when (string-equal major-mode "nxml-mode")
        (save-excursion
          (goto-char begin)
          (while (search-forward-regexp "\>[ \\t]*\<" nil t)
            (backward-char) (insert "\n"))
          (indent-region begin end))))))
  
  ;; -----------------------------------------------------------------------------
  ;; XPROC
  ;; -----------------------------------------------------------------------------
  
  (require-package 'xproc-mode 'xproc-mode t)
  
  (add-to-list 'auto-mode-alist '("\\.xpl$" . xproc-mode))
  
  (eval-after-load 'xproc-mode '(progn
    
    (push (expand-file-name "schema/schemas.xml" (el-get-package-directory 'xproc-mode))
          rng-schema-locating-files)
    
    (require-package 'yasnippet)
    (require 'yasnippet)
    (push (expand-file-name "snippets" (el-get-package-directory 'xproc-mode))
           yas/snippet-dirs)
    (yas-reload-all)
    
    (add-hook 'xproc-mode-hook
      (lambda () (yas-minor-mode)
                 (push 'ac-source-xproc-tag ac-sources)))))
  
  ;; -----------------------------------------------------------------------------
  
  (provide 'config-xml)
  
#+END_SRC
